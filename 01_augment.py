# -*- coding: utf-8 -*-
"""01_augment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Lg2op5LhtjCerWwVwOhjwGdToPcp1qaO

# EDA (Easy Data Augmentation)

This notebook reproduces the core logic of **EDA: Easy Data Augmentation for Text Classification (Wei & Zou, 2019)** without cloning any external repositories.

It will:
1. Mount **Google Drive** and set a persistent project directory (so nothing is stored in Colab's temporary space).
2. Install dependencies and download NLTK resources.
3. Create a **structured folder layout** on Drive.
4. Download **SST-2** and **TREC** datasets via Hugging Face Datasets and export them to TSV (`label<TAB>sentence`).
5. Implement the 4 EDA ops inline: **Synonym Replacement, Random Insertion, Random Swap, Random Deletion**.
6. Augment the training splits and save all artifacts to Drive (raw, augmented, combined).

**You can add your own training cells (LSTM/CNN/BERT) later.**
"""

from google.colab import drive
drive.mount('/content/drive')

import os, json, time

# Your project root on Drive (change if you prefer)
PROJECT_ROOT = '/content/drive/MyDrive/EDA_Project'
EDA_DIR      = f'{PROJECT_ROOT}/eda'               # we keep python code blocks here (but defined inline in this notebook)
DATA_ROOT    = f'{PROJECT_ROOT}/size_data_f1'      # replicates the repo's structure
LOGS_DIR     = f'{PROJECT_ROOT}/logs'
CONFIGS_DIR  = f'{PROJECT_ROOT}/configs'
MODELS_DIR   = f'{PROJECT_ROOT}/models'

for p in [PROJECT_ROOT, EDA_DIR, DATA_ROOT, LOGS_DIR, CONFIGS_DIR, MODELS_DIR]:
    os.makedirs(p, exist_ok=True)

print("✅ Folders ready:")
for p in [PROJECT_ROOT, EDA_DIR, DATA_ROOT, LOGS_DIR, CONFIGS_DIR, MODELS_DIR]:
    print("→", p)

# 1) Install dependencies
!pip -q install datasets nltk
import nltk
nltk.download('wordnet')
nltk.download('omw-1.4')

"""## EDA Implementation
We implement the four operations described in the paper:
- **Synonym Replacement (SR)**
- **Random Insertion (RI)**
- **Random Swap (RS)**
- **Random Deletion (RD)**

Adjust strengths via alpha parameters (fractions of words to modify).
"""

# Easy data augmentation techniques for text classification
# Jason Wei and Kai Zou

import random
from random import shuffle
random.seed(1)

# stop words list (from the original source)
stop_words = ['i', 'me', 'my', 'myself', 'we', 'our',
            'ours', 'ourselves', 'you', 'your', 'yours',
            'yourself', 'yourselves', 'he', 'him', 'his',
            'himself', 'she', 'her', 'hers', 'herself',
            'it', 'its', 'itself', 'they', 'them', 'their',
            'theirs', 'themselves', 'what', 'which', 'who',
            'whom', 'this', 'that', 'these', 'those', 'am',
            'is', 'are', 'was', 'were', 'be', 'been', 'being',
            'have', 'has', 'had', 'having', 'do', 'does', 'did',
            'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or',
            'because', 'as', 'until', 'while', 'of', 'at',
            'by', 'for', 'with', 'about', 'against', 'between',
            'into', 'through', 'during', 'before', 'after',
            'above', 'below', 'to', 'from', 'up', 'down', 'in',
            'out', 'on', 'off', 'over', 'under', 'again',
            'further', 'then', 'once', 'here', 'there', 'when',
            'where', 'why', 'how', 'all', 'any', 'both', 'each',
            'few', 'more', 'most', 'other', 'some', 'such', 'no',
            'nor', 'not', 'only', 'own', 'same', 'so', 'than', 'too',
            'very', 's', 't', 'can', 'will', 'just', 'don',
            'should', 'now', '']

# cleaning up text (from the original source)
import re
def get_only_chars(line):

    clean_line = ""

    line = line.replace("’", "")
    line = line.replace("'", "")
    line = line.replace("-", " ") # replace hyphens with spaces
    line = line.replace("\t", " ")
    line = line.replace("\n", " ")
    line = line.lower()

    for char in line:
        if char in 'qwertyuiopasdfghjklzxcvbnm ':
            clean_line += char
        else:
            clean_line += ' '

    clean_line = re.sub(' +', ' ', clean_line) # delete extra spaces
    if clean_line and clean_line[0] == ' ':
        clean_line = clean_line[1:]
    return clean_line

########################################################################
# Synonym replacement
########################################################################
from nltk.corpus import wordnet

def get_synonyms(word):
    synonyms = set()
    for syn in wordnet.synsets(word):
        for l in syn.lemmas():
            synonym = l.name().replace("_", " ").replace("-", " ").lower()
            synonym = "".join([char for char in synonym if char in ' qwertyuiopasdfghjklzxcvbnm'])
            synonyms.add(synonym)
    if word in synonyms:
        synonyms.remove(word)
    return list(synonyms)

def synonym_replacement(words, n):
    new_words = words.copy()
    random_word_list = list(set([word for word in words if word not in stop_words]))
    random.shuffle(random_word_list)
    num_replaced = 0
    for random_word in random_word_list:
        synonyms = get_synonyms(random_word)
        if len(synonyms) >= 1:
            synonym = random.choice(list(synonyms))
            new_words = [synonym if word == random_word else word for word in new_words]
            num_replaced += 1
        if num_replaced >= n:
            break

    sentence = ' '.join(new_words)
    new_words = sentence.split(' ')
    return new_words

########################################################################
# Random deletion
########################################################################
def random_deletion(words, p):
    if len(words) == 1:
        return words

    new_words = []
    for word in words:
        r = random.uniform(0, 1)
        if r > p:
            new_words.append(word)

    if len(new_words) == 0:
        rand_int = random.randint(0, len(words)-1)
        return [words[rand_int]]

    return new_words

########################################################################
# Random swap
########################################################################
def random_swap(words, n):
    new_words = words.copy()
    for _ in range(n):
        new_words = swap_word(new_words)
    return new_words

def swap_word(new_words):
    random_idx_1 = random.randint(0, len(new_words)-1)
    random_idx_2 = random_idx_1
    counter = 0
    while random_idx_2 == random_idx_1:
        random_idx_2 = random.randint(0, len(new_words)-1)
        counter += 1
        if counter > 3:
            return new_words
    new_words[random_idx_1], new_words[random_idx_2] = new_words[random_idx_2], new_words[random_idx_1]
    return new_words

########################################################################
# Random insertion
########################################################################
def random_insertion(words, n):
    if not words or n <= 0:
        return words
    new_words = words.copy()
    for _ in range(n):
        add_word(new_words)
    return new_words

def add_word(new_words):
    if not new_words:
        return
    synonyms = []
    counter = 0
    while len(synonyms) < 1:
        random_word = new_words[random.randint(0, len(new_words)-1)]
        synonyms = get_synonyms(random_word)
        counter += 1
        if counter >= 10:
            return
    random_synonym = synonyms[0]
    random_idx = random.randint(0, len(new_words)-1)
    new_words.insert(random_idx, random_synonym)

########################################################################
# main EDA function
########################################################################
def eda(sentence, alpha_sr=0.1, alpha_ri=0.1, alpha_rs=0.1, p_rd=0.1, num_aug=9):
    sentence = get_only_chars(sentence)
    words = sentence.split(' ')
    words = [word for word in words if word != '']
    num_words = len(words)

    if num_words == 0:
        return [sentence]

    augmented_sentences = []
    num_new_per_technique = int(num_aug/4) + 1

    # SR
    if (alpha_sr > 0):
        n_sr = max(1, int(alpha_sr*num_words))
        for _ in range(num_new_per_technique):
            a_words = synonym_replacement(words, n_sr)
            augmented_sentences.append(' '.join(a_words))

    # RI
    if (alpha_ri > 0):
        n_ri = max(1, int(alpha_ri*num_words))
        for _ in range(num_new_per_technique):
            a_words = random_insertion(words, n_ri)
            augmented_sentences.append(' '.join(a_words))

    # RS
    if (alpha_rs > 0):
        n_rs = max(1, int(alpha_rs*num_words))
        for _ in range(num_new_per_technique):
            a_words = random_swap(words, n_rs)
            augmented_sentences.append(' '.join(a_words))

    # RD
    if (p_rd > 0):
        for _ in range(num_new_per_technique):
            a_words = random_deletion(words, p_rd)
            augmented_sentences.append(' '.join(a_words))

    augmented_sentences = [get_only_chars(sentence) for sentence in augmented_sentences]
    shuffle(augmented_sentences)

    if num_aug >= 1:
        augmented_sentences = augmented_sentences[:num_aug]
    else:
        keep_prob = num_aug / len(augmented_sentences)
        augmented_sentences = [s for s in augmented_sentences if random.uniform(0, 1) < keep_prob]

    augmented_sentences.append(sentence)
    return augmented_sentences

"""## Augmentation methods"""

def gen_aug(train_file, output_file, alpha, num_aug, aug_type):
    import csv
    total_in, total_out = 0, 0
    with open(train_file, 'r', encoding='utf-8') as fin, open(output_file, 'w', encoding='utf-8', newline='') as fout:
        reader = csv.reader(fin, delimiter='\t')
        writer = csv.writer(fout, delimiter='\t')
        for row in reader:
            if not row or len(row) < 2:
                continue
            label, sentence = row[0], row[1]
            total_in += 1
            augmented = eda(
                sentence,
                alpha_sr=alpha if aug_type=='sr' else 0,
                alpha_ri=alpha if aug_type=='ri' else 0,
                alpha_rs=alpha if aug_type=='rs' else 0,
                p_rd=alpha if aug_type=='rd' else 0,
                num_aug=num_aug
            )
            for a in augmented:
                writer.writerow([label, a])
                total_out += 1
    print(f"  ↳ Wrote {total_out} rows to {output_file} (from {total_in} originals)")

def gen_sr_aug(train_file, output_file, alpha, num_aug): gen_aug(train_file, output_file, alpha, num_aug, 'sr')
def gen_ri_aug(train_file, output_file, alpha, num_aug): gen_aug(train_file, output_file, alpha, num_aug, 'ri')
def gen_rs_aug(train_file, output_file, alpha, num_aug): gen_aug(train_file, output_file, alpha, num_aug, 'rs')
def gen_rd_aug(train_file, output_file, alpha, num_aug): gen_aug(train_file, output_file, alpha, num_aug, 'rd')

"""## Augment SST-2
We will create augmented versions of training splits and also **combined** files (original + augmented).

### Config for SST-2
"""

# ======= Config mirroring a_config.py but limited to SST-2 =======

# size folders
sizes = ['1_tiny', '2_small', '3_standard', '4_full']
size_folders = [f'size_data_f1/{s}' for s in sizes]

# methods and alphas (same semantics as a_config.py)
a_methods = ['sr', 'ri', 'rd', 'rs']
alphas    = [0.05, 0.1, 0.2, 0.3, 0.4, 0.5]

# we’re focusing only on SST-2 here
dataset_name = 'sst2'

# number of augmentations per size (pick the SST-2 index=1 from original n_aug_list_dict)
# original: {'1_tiny':[16,16,16,16,16], '2_small':[16,16,16,16,16], '3_standard':[8,8,8,8,4], '4_full':[8,8,8,8,4]}
n_aug_by_size = {
    'size_data_f1/1_tiny': 16,
    'size_data_f1/2_small': 16,
    'size_data_f1/3_standard': 8,
    'size_data_f1/4_full': 8,
}

# where to store a copy of this config for reproducibility
cfg = {
    "sizes": sizes,
    "a_methods": a_methods,
    "alphas": alphas,
    "dataset": dataset_name,
    "n_aug_by_size": n_aug_by_size,
}
with open(f"{CONFIGS_DIR}/augment_sst2_config.json", "w") as f:
    json.dump(cfg, f, indent=2)

print("✅ Saved config ->", f"{CONFIGS_DIR}/augment_sst2_config.json")

"""### Prepare SST-2 for each size"""

from datasets import load_dataset
import csv, os

# map sizes to slice of the train split (you can adjust later if needed)
slice_map = {
    '1_tiny':     'train[:5%]',
    '2_small':    'train[:20%]',
    '3_standard': 'train[:50%]',
    '4_full':     'train',
}

for size in sizes:
    out_dir = f"{DATA_ROOT}/{size}/{dataset_name}"
    os.makedirs(out_dir, exist_ok=True)
    out_path = f"{out_dir}/train_orig.txt"

    split_spec = slice_map[size]
    ds = load_dataset('glue', 'sst2', split=split_spec)

    with open(out_path, 'w', encoding='utf-8', newline='') as f:
        w = csv.writer(f, delimiter='\t')
        for row in ds:
            # GLUE SST-2 fields are 'sentence' and 'label'
            sent = row['sentence'].replace('\t', ' ').strip()
            w.writerow([row['label'], sent])
    print(f"✅ Wrote {out_path}")

from datasets import load_dataset
import csv, os

test_out_dir = f"{DATA_ROOT}/test/{dataset_name}"
os.makedirs(test_out_dir, exist_ok=True) # Corrected: Use test_out_dir here
test_path = f"{test_out_dir}/test.txt"

ds_val = load_dataset('glue', 'sst2', split='validation')
with open(test_path, 'w', encoding='utf-8', newline='') as f:
    w = csv.writer(f, delimiter='\t')
    for row in ds_val:
        w.writerow([row['label'], row['sentence'].replace('\t', ' ').strip()])
print("✓ wrote", test_path)

"""### Run augmentation for SST-2 (train split only)"""

import os, time, csv
from datetime import datetime

log_path = f"{LOGS_DIR}/augmentation_log_sst2.csv"
if not os.path.exists(log_path):
    with open(log_path, "w", newline='', encoding='utf-8') as f:
        csv.writer(f).writerow(["timestamp","size","method","alpha","num_aug","input","output","seconds"])

for size in sizes:
    size_folder = f"size_data_f1/{size}"
    dataset_folder = f"{size_folder}/{dataset_name}"
    os.makedirs(f"{DATA_ROOT}/{size}/{dataset_name}", exist_ok=True)

    train_orig = f"{DATA_ROOT}/{size}/{dataset_name}/train_orig.txt"
    if not os.path.exists(train_orig):
        print("⚠️ Missing:", train_orig)
        continue

    n_aug = n_aug_by_size[size_folder]

    print(f"\n=== Size: {size} | n_aug={n_aug} ===")
    for a_method in a_methods:
        for alpha in alphas:
            output_file = f"{DATA_ROOT}/{size}/{dataset_name}/train_{a_method}_{alpha}.txt"
            t0 = time.time()
            print(f"→ {a_method.upper()} | alpha={alpha} | {os.path.basename(output_file)}")
            if a_method == 'sr':
                gen_sr_aug(train_orig, output_file, alpha, n_aug)
            elif a_method == 'ri':
                gen_ri_aug(train_orig, output_file, alpha, n_aug)
            elif a_method == 'rd':
                gen_rd_aug(train_orig, output_file, alpha, n_aug)
            elif a_method == 'rs':
                gen_rs_aug(train_orig, output_file, alpha, n_aug)
            secs = round(time.time() - t0, 2)

            with open(log_path, "a", newline='', encoding='utf-8') as f:
                csv.writer(f).writerow([datetime.now().isoformat(), size, a_method, alpha, n_aug, train_orig, output_file, secs])

print("\n✅ Augmentation finished. Log saved to:", log_path)

"""## word2Vec2"""

import os, zipfile, requests, io

WORD2VEC_DIR = f"{PROJECT_ROOT}/word2vec"
os.makedirs(WORD2VEC_DIR, exist_ok=True)

# Download glove.6B.zip (approx 822MB) – if this is too big for your quota, tell me and we’ll switch to gensim small.
url = "http://nlp.stanford.edu/data/glove.6B.zip"
zip_path = f"{WORD2VEC_DIR}/glove.6B.zip"

if not os.path.exists(zip_path):
    !wget -q -O "$zip_path" "$url"

with zipfile.ZipFile(zip_path) as zf:
    print(zf.namelist())
    # Extract the specific file we need
    zf.extract("glove.6B.100d.txt", WORD2VEC_DIR)


GLOVE_TXT = f"{WORD2VEC_DIR}/glove.6B.100d.txt"
assert os.path.exists(GLOVE_TXT)
print("✓ GloVe ready:", GLOVE_TXT)

huge_word2vec = GLOVE_TXT
word2vec_len  = 100

"""## Build word2vec.p for each SST-2 train folder you created"""

# reuse gen_vocab_dicts() from your methods.py; if it's not loaded in this notebook, define a quick version below.

import numpy as np, pickle, re

def get_all_txt_paths(master_folder):
    from os import listdir
    from os.path import isfile, join, isdir
    # grab .txt files from either this folder or its subfolders
    subfolders = [join(master_folder, f) for f in listdir(master_folder) if isdir(join(master_folder, f))]
    paths = []
    if subfolders:
        for sf in subfolders:
            for f in listdir(sf):
                p = join(sf, f)
                if isfile(p) and p.endswith(".txt"):
                    paths.append(p)
    else:
        for f in listdir(master_folder):
            p = join(master_folder, f)
            if isfile(p) and p.endswith(".txt"):
                paths.append(p)
    return sorted(paths)

def gen_vocab_dicts(folder, output_pickle_path, glove_txt):
    vocab = set()
    all_txt_paths = get_all_txt_paths(folder)
    for txt in all_txt_paths:
        try:
            for line in open(txt, 'r', encoding='utf-8'):
                # take both label and sentence into account; split after label
                parts = line.strip().split('\t', 1)
                if len(parts) == 2:
                    for w in parts[1].split():
                        vocab.add(w)
        except Exception as e:
            print("Skipped (error):", txt, e)

    print(len(vocab), "unique words found; scanning GloVe...")
    word2vec = {}
    with open(glove_txt, 'r', encoding='utf-8') as f:
        for line in f:
            items = line.rstrip().split(' ')
            if not items: continue
            word, vec = items[0], items[1:]
            if word in vocab:
                word2vec[word] = np.asarray(vec, dtype='float32')
    print(len(word2vec), "matches saved to", output_pickle_path)
    pickle.dump(word2vec, open(output_pickle_path, 'wb'))

for size in ['1_tiny','2_small','3_standard','4_full']:
    folder = f"{DATA_ROOT}/{size}/sst2"
    out_pkl = f"{folder}/word2vec.p"
    gen_vocab_dicts(folder, out_pkl, GLOVE_TXT)

"""## Precheck for SST-2"""

import os, glob

# test file
assert os.path.exists(f"{DATA_ROOT}/test/sst2/test.txt")

# at least one augmented train file per size (SR example)
for size in ['1_tiny','2_small','3_standard','4_full']:
    p_train = f"{DATA_ROOT}/{size}/sst2/train_sr_0.1.txt"
    assert os.path.exists(p_train), f"Missing {p_train}"
    p_w2v = f"{DATA_ROOT}/{size}/sst2/word2vec.p"
    assert os.path.exists(p_w2v), f"Missing {p_w2v}"

print("✓ All required paths look good.")